1
00:00:00,550 --> 00:00:04,110
在整个课程中 我们会遇到很多能够使

2
00:00:04,110 --> 00:00:09,960
设计师、艺术家、开发人员和数据科学家

3
00:00:09,960 --> 00:00:13,850
表达其观点 与世界沟通其深刻见解的技术、工具

4
00:00:13,850 --> 00:00:17,400
我们将试图让你接触我们认为

5
00:00:17,400 --> 00:00:22,310
能帮助你创建数据可视化图表最相关的工具

6
00:00:22,310 --> 00:00:26,240
还有很多技术 不能一一涉及

7
00:00:26,240 --> 00:00:30,300
但是 你可能会遇见这些技术 或至少遇见过使用这些技术的人

8
00:00:30,300 --> 00:00:33,570
因此 了解关于这些技术的一些知识很重要

9
00:00:33,570 --> 00:00:35,510
在这个图谱的底部

10
00:00:35,510 --> 00:00:38,760
是低层级图表格式和规格

11
00:00:38,760 --> 00:00:42,260
当你创建一个可视化图表时

12
00:00:42,260 --> 00:00:46,430
这些是最高效、最高性能和最灵活的选择 但层级较低

13
00:00:46,430 --> 00:00:51,070
需要花费很多时间来学习和开发

14
00:00:51,070 --> 00:00:55,120
将他们视作可视化图表的汇编语言

15
00:00:55,120 --> 00:00:59,270
这些技术能灵活运用于你能做的事情

16
00:00:59,270 --> 00:01:04,610
它们逼着你确定你想做什么 精确到像素和线

17
00:01:04,610 --> 00:01:11,390
而不是就确定一个点 (x, y) 创建一个路径到点 (w, z)

18
00:01:11,390 --> 00:01:17,070
这就像你在教一名油漆匠或机器人如何绘画

19
00:01:18,180 --> 00:01:21,950
向图谱上方走 一直到高水平语言和库

20
00:01:21,950 --> 00:01:26,690
开发图表变得更容易、更快

21
00:01:26,690 --> 00:01:30,500
你使用的工具灵活性可能

22
00:01:30,500 --> 00:01:34,560
比 HTML5 canvas、WebG L 或 SVG 稍差

23
00:01:34,560 --> 00:01:40,580
跳到我们喜欢的 D3.js

24
00:01:40,580 --> 00:01:44,210
我们将在一秒内了解更多 D3 具体信息

25
00:01:44,210 --> 00:01:49,440
但作为建立在开放式网络标准基础上的数据可视化图表库

26
00:01:49,440 --> 00:01:54,280
它在 JavaScript 环境中执行 允许数据

27
00:01:54,280 --> 00:02:00,220
与 HTML 和 SVG 元素或网页上的内容实现无缝对接

28
00:02:00,220 --> 00:02:06,080
因为你可以使用 CSS 设置 HTML 和 SVG 的格式

29
00:02:06,080 --> 00:02:11,810
CSS 与 D3.JS 的基础技术能够自然兼容

30
00:02:12,850 --> 00:02:16,210
与大多数人的想法相反

31
00:02:16,210 --> 00:02:19,220
实际上 D3 的抽象层级很低

32
00:02:19,220 --> 00:02:23,320
继续使用我们的编程语言

33
00:02:23,320 --> 00:02:28,380
及其基础的比喻 我认为可视化技术图谱中的 D3

34
00:02:28,380 --> 00:02:33,625
实际上与 C 或 C++

35
00:02:33,625 --> 00:02:37,850
在整个编程语言图谱中的水平十分类似

36
00:02:37,850 --> 00:02:42,590
与人们使用 C 或 C++ 构造其他语言的运行系统

37
00:02:42,590 --> 00:02:47,930
程序和编译程序一样

38
00:02:47,930 --> 00:02:52,880
使用 D3 建立更高层级的程序和库 真的很不错

39
00:02:54,110 --> 00:02:58,040
这给我们展示了整套 D3.js 库

40
00:02:58,040 --> 00:02:59,510
这一层代表

41
00:02:59,510 --> 00:03:03,180
在 D3 语句块上建立的很多高层级库

42
00:03:03,180 --> 00:03:06,600
有很多库建立在 D3 基础之上 难以全部罗列

43
00:03:06,600 --> 00:03:11,530
可能会填满这一整个屏幕 最常见的三个库

44
00:03:11,530 --> 00:03:14,598
或我们在此课程中会提及的库包括 Rickshaw

45
00:03:14,598 --> 00:03:18,580
Dimple.js 和 NVD3

46
00:03:18,580 --> 00:03:25,340
人们总是把 D3.js 当作数据可视化库标识

47
00:03:25,340 --> 00:03:29,170
你可以轻松组合 D3.js 成分

48
00:03:29,170 --> 00:03:33,430
从而在其基础上建立更高层级的程序和库

49
00:03:33,430 --> 00:03:37,990
操纵每个建立在 D3 基础上的库看起来十分困难

50
00:03:37,990 --> 00:03:42,710
因为它们通常是这两类中的一类

51
00:03:42,710 --> 00:03:47,655
即高层级的图表库 如 NVD3 和 Dimple.js

52
00:03:47,655 --> 00:03:53,140
或定制的具体的数据类型

53
00:03:53,140 --> 00:03:53,880
如 Rickshaw

54
00:03:54,930 --> 00:03:57,610
Rickshaw 能最有效

55
00:03:57,610 --> 00:04:02,500
最轻松地显示时间序列和实时流数据

56
00:04:02,500 --> 00:04:07,550
同样 显示一个具体的数据类型也是

57
00:04:07,550 --> 00:04:13,130
有助于在图上绘制数据图 添加互动的地理库

58
00:04:13,130 --> 00:04:16,890
在后面几节课中 我们将使用 Dimple.js

59
00:04:16,890 --> 00:04:21,010
切身体验使用比简单的 D3 更高层级的

60
00:04:21,010 --> 00:04:22,930
程序的力量

61
00:04:22,930 --> 00:04:28,330
我们再回到我们的编程语言图谱

62
00:04:28,330 --> 00:04:32,640
WebGL、Canvas 和 SVG 是否与汇编语言类似

63
00:04:32,640 --> 00:04:35,705
D3 是否与 C 和 C++ 类似

64
00:04:35,705 --> 00:04:40,400
我认为在 D3 基础上建立的更高层级的库

65
00:04:40,400 --> 00:04:45,470
在提取层级上与 Python 或 Ruby 类似

66
00:04:45,470 --> 00:04:50,300
Python 和 Ruby 是相当高层级的语言 有人将其翻译过来

67
00:04:50,300 --> 00:04:53,980
你不必处理缓存

68
00:04:53,980 --> 00:04:56,600
多次使用 C 或 C++ 执行

69
00:04:56,600 --> 00:05:00,660
与这些高层级的语言一样

70
00:05:00,660 --> 00:05:05,509
以一种低层级的语言 NVD3、Dimple.js 和

71
00:05:05,509 --> 00:05:11,570
Rickshaw 执行可以视为在 D3.js 内或在 D3.js 基础上执行

72
00:05:11,570 --> 00:05:14,750
在这个图谱的最顶端 具有创建可视化图表的

73
00:05:14,750 --> 00:05:20,050
图表接口 如 Raw 或 Chartio

74
00:05:21,360 --> 00:05:25,990
Raw 是建立在 D3 基础上的一个开放源库

75
00:05:25,990 --> 00:05:29,940
通过 Raw 可以轻松、快速地建立预先定义的图表

76
00:05:29,940 --> 00:05:35,420
Chartio 是一款基于 Web 的产品 与 Tableau 类似

77
00:05:35,420 --> 00:05:40,830
可以使你快速、轻松地探索数据 建立信息中心和

78
00:05:40,830 --> 00:05:43,210
图表

79
00:05:43,210 --> 00:05:43,710
其名称 Chart.io 由此得来

80
00:05:45,040 --> 00:05:49,330
由于这些库在图谱上的位置较高

81
00:05:49,330 --> 00:05:54,970
其灵活性受限 通常只能产生一套预先定义的图表

82
00:05:54,970 --> 00:05:58,380
优势是拥有固定数量的预先定义的图表

83
00:05:58,380 --> 00:06:02,720
可轻松、无缝创建预先定义的图表

84
00:06:02,720 --> 00:06:07,010
把这些图表设想为数据可视化库的 Excel

85
00:06:07,010 --> 00:06:10,070
它们对于你最可能遇到的 90% 或

86
00:06:10,070 --> 00:06:14,500
95% 左右的使用案例极为有用

87
00:06:14,500 --> 00:06:19,010
它们可以轻松执行 95% 的案例

88
00:06:19,010 --> 00:06:22,580
其图表可能正好是你要寻找的

89
00:06:22,580 --> 00:06:26,900
但如果你的想法与预先定义图表不同

90
00:06:26,900 --> 00:06:29,850
如果想要对这些图表进行修改 就会很麻烦

91
00:06:29,850 --> 00:06:35,210
如果你不理解我讲述的电脑编程语言类比

92
00:06:35,210 --> 00:06:35,800
也不要紧

93
00:06:35,800 --> 00:06:39,400
你不需要在本节课了解这些

94
00:06:39,400 --> 00:06:42,990
但我希望它能够帮助你们更好地理解

95
00:06:42,990 --> 00:06:46,110
这些技术在提取和可视化图谱中

96
00:06:46,110 --> 00:06:47,990
处于什么位置

97
00:06:49,210 --> 00:06:53,380
有时 我会想象将这些技术存放在

98
00:06:53,380 --> 00:06:55,860
一个提取金字塔中

99
00:06:55,860 --> 00:07:01,690
假设金字塔的宽度表示每个技术

100
00:07:01,690 --> 00:07:06,610
在那个层级的灵活程度 金字塔的高度

101
00:07:06,610 --> 00:07:09,940
表示使用此技术创建可视化图表的容易程度以及

102
00:07:09,940 --> 00:07:13,140
能实现的开发者的生产效率如何

103
00:07:13,140 --> 00:07:17,170
金字塔的底部是灵活性很强

104
00:07:17,170 --> 00:07:21,300
在性能和效率方面提供很多乐趣

105
00:07:21,300 --> 00:07:26,260
但可能不易于使用 且开发慢的技术

106
00:07:26,260 --> 00:07:29,720
在图谱的另一端 金字塔的顶部

107
00:07:29,720 --> 00:07:32,700
是 Raw 和 Chart.io

108
00:07:32,700 --> 00:07:37,550
这两种易于使用 能够快速开发

109
00:07:37,550 --> 00:07:39,600
并更改可视化图表的技术

110
00:07:39,600 --> 00:07:44,610
但和 Web GL 或 D3 相比 其灵活性相差很多

111
00:07:44,610 --> 00:07:47,750
作为一名开发人员 尤其是在从事数据科学项目时

112
00:07:47,750 --> 00:07:50,830
你需要时刻考虑的一件事是

113
00:07:50,830 --> 00:07:54,380
此项目的整个范围比

114
00:07:54,380 --> 00:07:59,510
可视化图表要大很多 你需要权衡好开发效率和

115
00:07:59,510 --> 00:08:01,580
解决方案的效率

116
00:08:01,580 --> 00:08:02,980
由于浏览器和所涉及的所有技术

117
00:08:02,980 --> 00:08:08,040
最近的趋势和性能改善

118
00:08:08,040 --> 00:08:13,190
以及更高层级的库创建的提出程序

119
00:08:13,190 --> 00:08:16,660
对开发人员来说非常幸运 能使用

120
00:08:16,660 --> 00:08:22,210
生产率特别高、灵活性十分强且非常有效的最好的库

121
00:08:22,210 --> 00:08:24,820
因此 你能够直接享受成果

122
00:08:24,820 --> 00:08:29,170
而不是在高层库中进行编码

123
00:08:29,170 --> 00:08:33,220
即便得到良好的性能和灵活性

124
00:08:33,220 --> 00:08:37,110
每个数据可视化库有自身的优缺点

125
00:08:37,110 --> 00:08:42,679
在当前的例子中 我们重点看 JavaScript 库 D3

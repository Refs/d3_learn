1
00:00:00,610 --> 00:00:04,640
我想提一下 D3 的全称 因为我认为

2
00:00:04,640 --> 00:00:10,310
这样可以证明为什么创建此库 以及它如何将数据和网页结合起来

3
00:00:10,310 --> 00:00:13,540
数据驱动文档

4
00:00:13,540 --> 00:00:18,620
在这里 数据指我们努力显示的一些信息

5
00:00:18,620 --> 00:00:22,525
CSV 或 JSON 从外部加载

6
00:00:22,525 --> 00:00:27,110
或只是一个 JavaScript 对象或变量

7
00:00:27,110 --> 00:00:32,390
文档指网页或 Web 文档参考

8
00:00:32,390 --> 00:00:38,010
常常还指很多 HTML、CSS、JavaScript 和 SVG

9
00:00:38,010 --> 00:00:41,470
但 数据驱动 html 或

10
00:00:41,470 --> 00:00:47,180
数据驱动网页不同

11
00:00:47,180 --> 00:00:52,040
驱动 D3 将数据和文档连接起来

12
00:00:52,040 --> 00:00:58,660
或更具体地说 将 CSV 或 JSON 行与 SVG 元素对接

13
00:00:58,660 --> 00:01:04,599
更正式地讲 文档不仅指网页来源

14
00:01:04,599 --> 00:01:10,080
和 HTML、CSS、JavaScript 或 SVG 内容

15
00:01:10,080 --> 00:01:15,200
还包括所谓的文档对象模型或 DOM

16
00:01:16,400 --> 00:01:19,920
Web 浏览器能够储存两个版本的 Web 页面或

17
00:01:19,920 --> 00:01:22,110
两个视图

18
00:01:22,110 --> 00:01:25,618
一个是我曾提到的从 web 服务器返回的初始源

19
00:01:25,618 --> 00:01:31,050
另一个是解析的 DOM 对象

20
00:01:31,050 --> 00:01:36,194
文档对象模型是一个规范 更像 HTML 和 CSS

21
00:01:36,194 --> 00:01:42,820
为 HTML 和 XML 文档规定了常见的编程接口

22
00:01:42,820 --> 00:01:48,080
一旦 HTML 源从服务器返回 Web 浏览器

23
00:01:48,080 --> 00:01:53,040
便会解析文件 并将其转换为一个能够

24
00:01:53,040 --> 00:01:57,530
通过 JavaScript 以编程方式评估的分层对象 称为 DOM

25
00:01:58,610 --> 00:02:04,140
实际上 D3 将数据和 DOM 而非

26
00:02:04,140 --> 00:02:06,610
HTML 源或视觉元素对接

27
00:02:06,610 --> 00:02:09,660
但由于 DOM 实际上代表并与

28
00:02:09,660 --> 00:02:15,680
视觉显示内容相互作用 我们将数据与 DOM 对接时

29
00:02:15,680 --> 00:02:21,580
D3 驱动文档 在当前的例子中指 DOM 的视觉表达

30
00:02:21,580 --> 00:02:26,250
并在 DOM 的数据基础上创建一个图表

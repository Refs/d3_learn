1
00:00:00,590 --> 00:00:05,139
注意在使用 document.queryselector

2
00:00:05,139 --> 00:00:08,943
或者 document.getelementbyID 时

3
00:00:08,943 --> 00:00:10,780
我们获取的是 dom 节点

4
00:00:10,780 --> 00:00:13,780
通过 ID 获取并保存

5
00:00:13,780 --> 00:00:15,490
footer 元素也能起到同样效果

6
00:00:15,490 --> 00:00:19,250
但取得一个 D3 对象更好些

7
00:00:19,250 --> 00:00:23,050
方便对元素调用 D3 方法

8
00:00:23,050 --> 00:00:26,330
比如通过 append 方法

9
00:00:26,330 --> 00:00:28,750
向已有元素添加其它元素

10
00:00:28,750 --> 00:00:31,570
此时控制台报错说该方法未定义

11
00:00:32,750 --> 00:00:37,580
因为元素变量并没有 D3 选择

12
00:00:37,580 --> 00:00:40,110
还不具备 append 方法

13
00:00:40,110 --> 00:00:42,480
此时它只是个普通的 dom 节点

14
00:00:42,480 --> 00:00:47,160
在变量名后加点号可以查看所有可用方法

15
00:00:47,160 --> 00:00:51,750
就像这样

16
00:00:53,140 --> 00:00:57,050
为了充分使用 D3 chainable API,

17
00:00:57,050 --> 00:00:59,550
我们需要创建一个 D3 选择

18
00:00:59,550 --> 00:01:02,540
我之后会详细说明 API 的可链性

19
00:01:02,540 --> 00:01:04,810
先来看 D3 选择

20
00:01:06,050 --> 00:01:07,730
通过查看文档

21
00:01:07,730 --> 00:01:12,060
我想找到在网页中查找不同元素的方法

22
00:01:12,060 --> 00:01:16,180
好像 select 以及 select all 可以做这件事

23
00:01:16,180 --> 00:01:18,790
让我们再仔细看看

24
00:01:18,790 --> 00:01:22,994
D3 选择函数跟 document.query 选择器很像

25
00:01:22,994 --> 00:01:24,453
后者用法我们已经见过

26
00:01:24,453 --> 00:01:29,770
使用它与使用 CSS 选择器语法相同

27
00:01:29,770 --> 00:01:35,430
要注意这时返回的不再是单个 dom 节点而是数组

28
00:01:35,430 --> 00:01:40,060
实际上 select 方法返回

29
00:01:40,060 --> 00:01:41,920
第一个符合语法定义的 dom 节点

30
00:01:42,930 --> 00:01:45,220
如果没有符合条件的选项

31
00:01:45,220 --> 00:01:49,490
会返回一个空数组

32
00:01:49,490 --> 00:01:53,540
让我们用 .main 类重新选择元素

33
00:01:53,540 --> 00:01:55,530
看看能否使用该方法

34
00:01:55,530 --> 00:01:58,900
已经可以获取 append 方法

35
00:01:58,900 --> 00:02:04,630
因为变量现在指向 D3 对象而不仅是一个 DOM 节点

36
00:02:04,630 --> 00:02:08,639
而且我们获得的返回元素是一个数组

37
00:02:08,639 --> 00:02:10,949
这就是 D3 中的选择

38
00:02:10,949 --> 00:02:14,070
返回对象具有普通 DOM 节点类似特性

39
00:02:14,070 --> 00:02:17,120
但就 D3 对象还有另外内容要讲

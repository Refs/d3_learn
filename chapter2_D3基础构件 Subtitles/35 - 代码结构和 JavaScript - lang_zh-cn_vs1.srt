1
00:00:00,250 --> 00:00:05,010
我现在先让你从较高层次对 Mike 的代码结构有个整体了解

2
00:00:05,010 --> 00:00:08,530
让你大概了解该如何组织自己的代码

3
00:00:08,530 --> 00:00:11,500
我还会解释一些我们在控制台的示例中

4
00:00:11,500 --> 00:00:16,050
没有遇见过的一些元素

5
00:00:16,050 --> 00:00:22,370
在最顶部 是一个脚本 (script) 标签 它会载入我们的 D3 库

6
00:00:22,370 --> 00:00:25,810
在脚本标签的下面 是样式 (style) 标签

7
00:00:25,810 --> 00:00:31,310
可通过 D3 对创建的图片和元素添加样式

8
00:00:31,310 --> 00:00:36,850
接下来是可视化图的主要逻辑 通过 Draw 函数实现

9
00:00:36,850 --> 00:00:41,320
请注意 到现在为止的这三个内容

10
00:00:41,320 --> 00:00:45,310
都包含在我们 HTML 页面的头部 (head) 标签中

11
00:00:45,310 --> 00:00:47,480
我们打开主体 (body) 标签

12
00:00:47,480 --> 00:00:52,430
用一个 SVG 类别为图表 来放置可视化图

13
00:00:52,430 --> 00:00:55,100
最后是一点 JavaScript

14
00:00:55,100 --> 00:00:59,520
载入我们的外部数据文件 然后调用 draw 函数

15
00:00:59,520 --> 00:01:02,130
因为 JavaScript 是异步的

16
00:01:02,130 --> 00:01:06,400
你这里看到的代码 在执行时

17
00:01:06,400 --> 00:01:07,580
不一定是按照这里写出的顺序

18
00:01:07,580 --> 00:01:13,420
当浏览器阅读 HTML 文件时 它是从头到尾的

19
00:01:13,420 --> 00:01:19,690
分析每一行的内容 不管是 HTML、CSS、JavaScript 或 SVG

20
00:01:19,690 --> 00:01:22,650
虽然也会分析 JavaScript 函数

21
00:01:22,650 --> 00:01:25,280
但不代表说一定会执行

22
00:01:25,280 --> 00:01:27,880
而对 JavaScript 新学者来说

23
00:01:27,880 --> 00:01:31,580
最后让人崩溃的一点就是 回调 这个概念

24
00:01:31,580 --> 00:01:35,440
回调函数就是 在另一个函数完成时

25
00:01:35,440 --> 00:01:37,800
开始执行的函数

26
00:01:37,800 --> 00:01:41,400
我们一会儿看看 D3 如何利用回调的

27
00:01:41,400 --> 00:01:45,250
本 HTML 中第一行实际执行的 JavaScript

28
00:01:45,250 --> 00:01:49,870
是最后一行 载入我们的外部数据文件

29
00:01:49,870 --> 00:01:52,030
在数据文件载入之后

30
00:01:52,030 --> 00:01:56,940
也只有在它完成之后 绘制回调函数才会执行

31
00:01:56,940 --> 00:02:00,010
再次声明 绘制函数包含了

32
00:02:00,010 --> 00:02:02,690
创建可视化图的大部分逻辑

33
00:02:02,690 --> 00:02:05,010
绘制函数及其包含的所有代码

34
00:02:05,010 --> 00:02:10,120
都需要绑定一些数据 并进行可视化

35
00:02:10,120 --> 00:02:13,530
只有当数据完全载入后

36
00:02:13,530 --> 00:02:15,250
才能向绘制函数提供参数
